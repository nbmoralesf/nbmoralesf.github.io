labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = tract))+
geom_col()+
labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = reorder(tract, n)))+
geom_col()+
labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = reorder(tract, n)))+
geom_col(width = 0.6)+
labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = reorder(tract, n)))+
geom_col(color = viridis(5))+
labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = reorder(tract, n), color = tract))+
geom_col()+
labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes")+
theme_minimal()
ggplot(crashes_per_tract_geo, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(10)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(10)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(10)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(10)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
caption = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(10)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(10)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(10)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(10)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(20)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(11)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(11)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(13)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(13)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(13)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(20)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
most <- ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
last <- ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most + last
library(patchwork)
library(sf)
library(tidyverse)
library(tidycensus)
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
most <- ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
last <- ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most + last
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
most <- ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
last <- ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most + last
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
most <- ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
last <- ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most + last
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
most <- ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
last <- ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most + last
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
most <- ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
last <- ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most + plot_spacer() + last
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
most <- ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
last <- ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most + plot_spacer() + last + plot_layout(widths = c(1, 0.3, 1))
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(15)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
most_crashes <-  crashes_per_tract_geo %>%
arrange(desc(n)) %>%
head(10)
least_crashes <- crashes_per_tract_geo %>%
arrange(n) %>%
head(15)
ggplot(most_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the highest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
ggplot(least_crashes, aes(x = n, y = reorder(tract, n), fill = tract))+
geom_col()+
labs(title = "Crashes per tract",
subtitle = "The 10 tracts with the lowest number of crashes.",
x = "Number of crashes",
y = "Tract")+
theme_minimal()
#options(scipen = 999) # To view without scientific notation
library(tidyverse)
library(ggplot2)
library(sf)
library(tidycensus)
library(USAboundaries)
library(viridis)
st_crs(walk_index)
st_crs(all_us_counties)
all_us_counties <- st_transform(all_us_counties, crs = st_crs(walk_index))
walk_index <- st_read("Data/raw/WalkabilityIndex/Natl_WI.gdb")
#options(scipen = 999) # To view without scientific notation
library(tidyverse)
library(ggplot2)
library(sf)
library(tidycensus)
library(USAboundaries)
library(viridis)
load('data/clean/walk_index_mn.RData')
# Plot walkability data for MN
ggplot()+
geom_sf(data = walk_index_mn, aes(fill = NatWalkInd), color = NA)+
scale_fill_gradientn(colors = viridis(5), name = "Walkability Index")+
theme_minimal()
all_us_counties <- us_counties(map_date = NULL, resolution = "low")
st_crs(walk_index)
st_crs(all_us_counties)
all_us_counties <- st_transform(all_us_counties, crs = st_crs(walk_index))
# Use st_join to merge county boundaries and regions where we have walkability index data
all_us_counties_walk_index <- st_join(all_us_counties, walk_index)
library(Hmisc)
# Use Hmisc::wtd.mean() and Hmisc::wtd.var() to compute the weighted mean and SD of the walkability index (weighted by Shape_Area)
all_us_counties_walk_index_summ <- all_us_counties_walk_index %>%
group_by(name) %>%
mutate(weighted_mean = Hmisc::wtd.mean(NatWalkInd, Shape_Area, na.rm = TRUE),
weighted_sd = sqrt(Hmisc::wtd.var(NatWalkInd, Shape_Area, na.rm = TRUE))
)
# Filter down to one state and make maps
mass_walk_index <- all_us_counties_walk_index_summ %>%
filter(state_name == "New York")
# Average walkability Map
ggplot()+
geom_sf(data = mass_walk_index, aes(fill = weighted_mean), color = "white")+
scale_fill_gradientn(colors = c("pink", "lightblue3"), name = "Average Walkability")+
labs(title = "Average Walkability by County, NY")+
theme_minimal()
# Variability Map
ggplot()+
geom_sf(data = mass_walk_index, aes(fill = sqrt(weighted_sd)), color = "white")+
scale_fill_gradientn(colors = c("pink", "lightblue3"), name = "Variability in Walkability")+
labs(title = "Variability in Walkability accross a County, NY")+
theme_minimal()
# Plots for the US and by states
# US
ggplot(data = all_us_counties_walk_index_summ, aes(x = weighted_sd, y = weighted_mean))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
labs(title = "Variability in Walkability vs. Average Walkability, US",
x = "Variability in Walkability",
y = "Average Walkability")+
theme_minimal()
ggplot(data = all_us_counties_walk_index_summ, aes(x = weighted_sd, y = weighted_mean))+
geom_point(size = 0.3)+
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5)+
facet_wrap(~state_name)+
labs(title = "Variability in Walkability vs. Average Walkability, per state",
x = "Variability in Walkability",
y = "Average Walkability")+
theme_minimal()
all_us_counties <- us_counties(map_date = NULL, resolution = "low")
st_crs(walk_index)
st_crs(all_us_counties)
all_us_counties <- st_transform(all_us_counties, crs = st_crs(walk_index))
# Use st_join to merge county boundaries and regions where we have walkability index data
all_us_counties_walk_index <- st_join(all_us_counties, walk_index)
library(Hmisc)
# Use Hmisc::wtd.mean() and Hmisc::wtd.var() to compute the weighted mean and SD of the walkability index (weighted by Shape_Area)
all_us_counties_walk_index_summ <- all_us_counties_walk_index %>%
group_by(name) %>%
mutate(weighted_mean = Hmisc::wtd.mean(NatWalkInd, Shape_Area, na.rm = TRUE),
weighted_sd = sqrt(Hmisc::wtd.var(NatWalkInd, Shape_Area, na.rm = TRUE))
)
# Filter down to one state and make maps
mass_walk_index <- all_us_counties_walk_index_summ %>%
filter(state_name == "New York")
# Average walkability Map
ggplot()+
geom_sf(data = mass_walk_index, aes(fill = weighted_mean), color = "white")+
scale_fill_gradientn(colors = c("pink", "lightblue3"), name = "Average Walkability")+
labs(title = "Average Walkability by County, NY")+
theme_minimal()
# Variability Map
ggplot()+
geom_sf(data = mass_walk_index, aes(fill = sqrt(weighted_sd)), color = "white")+
scale_fill_gradientn(colors = c("pink", "lightblue3"), name = "Variability in Walkability")+
labs(title = "Variability in Walkability accross a County, NY")+
theme_minimal()
# Plots for the US and by states
# US
ggplot(data = all_us_counties_walk_index_summ, aes(x = weighted_sd, y = weighted_mean))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
labs(title = "Variability in Walkability vs. Average Walkability, US",
x = "Variability in Walkability",
y = "Average Walkability")+
theme_minimal()
ggplot(data = all_us_counties_walk_index_summ, aes(x = weighted_sd, y = weighted_mean))+
geom_point(size = 0.3)+
geom_smooth(method = "lm", se = FALSE, linewidth = 0.5)+
facet_wrap(~state_name)+
labs(title = "Variability in Walkability vs. Average Walkability, per state",
x = "Variability in Walkability",
y = "Average Walkability")+
theme_minimal()
