labels = c("Open", "Closed")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave(filename = "1-21-2025_TT.png")
open_avg_hgt <- peaks_tidy %>%
group_by(REGION_FACTOR, OPEN) %>%
summarize(avg_height = mean(HEIGHTM, na.rm = TRUE)) %>%
ungroup()
TT1 <- ggplot(open_avg_hgt, aes(x = REGION_FACTOR, y = avg_height, fill = OPEN)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Peak Height by Region (Stacked by Open Status)",
x = "Region",
y = "Average Peak Height",
fill = "Open") +
scale_fill_manual(values = c("TRUE" = "pink2", "FALSE" = "lavender"),
labels = c("Open", "Closed")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave(filename = "1-21-2025_TT.png", plot = TT1)
open_avg_hgt <- peaks_tidy %>%
group_by(REGION_FACTOR, OPEN) %>%
summarize(avg_height = mean(HEIGHTM, na.rm = TRUE)) %>%
ungroup()
TT1 <- ggplot(open_avg_hgt, aes(x = REGION_FACTOR, y = avg_height, fill = OPEN)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Peak Height by Region (Stacked by Open Status)",
x = "Region",
y = "Average Peak Height",
fill = "Open") +
scale_fill_manual(values = c("TRUE" = "pink2", "FALSE" = "lavender"),
labels = c("Open", "Closed")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave(filename = "1-21-2025_TT.png", plot = TT1())
open_avg_hgt <- peaks_tidy %>%
group_by(REGION_FACTOR, OPEN) %>%
summarize(avg_height = mean(HEIGHTM, na.rm = TRUE)) %>%
ungroup()
tt1 <- ggplot(open_avg_hgt, aes(x = REGION_FACTOR, y = avg_height, fill = OPEN)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Peak Height by Region (Stacked by Open Status)",
x = "Region",
y = "Average Peak Height",
fill = "Open") +
scale_fill_manual(values = c("TRUE" = "pink2", "FALSE" = "lavender"),
labels = c("Open", "Closed")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave(filename = "1-21-2025_TT.png", plot = tt1
open_avg_hgt <- peaks_tidy %>%
group_by(REGION_FACTOR, OPEN) %>%
summarize(avg_height = mean(HEIGHTM, na.rm = TRUE)) %>%
ungroup()
tt1 <- ggplot(open_avg_hgt, aes(x = REGION_FACTOR, y = avg_height, fill = OPEN)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Peak Height by Region (Stacked by Open Status)",
x = "Region",
y = "Average Peak Height",
fill = "Open") +
scale_fill_manual(values = c("TRUE" = "pink2", "FALSE" = "lavender"),
labels = c("Open", "Closed")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave(filename = "1-21-2025_TT.png", plot = tt1)
open_avg_hgt <- peaks_tidy %>%
group_by(REGION_FACTOR, OPEN) %>%
summarize(avg_height = mean(HEIGHTM, na.rm = TRUE)) %>%
ungroup()
tt1 <- ggplot(open_avg_hgt, aes(x = REGION_FACTOR, y = avg_height, fill = OPEN)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Peak Height by Region (Stacked by Open Status)",
x = "Region",
y = "Average Peak Height",
fill = "Open") +
scale_fill_manual(values = c("TRUE" = "pink2", "FALSE" = "lavender"),
labels = c("Open", "Closed")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = "1-21-2025_TT.png", plot = tt1)
open_avg_hgt <- peaks_tidy %>%
group_by(REGION_FACTOR, OPEN) %>%
summarize(avg_height = mean(HEIGHTM, na.rm = TRUE)) %>%
ungroup()
tt1 <- ggplot(open_avg_hgt, aes(x = REGION_FACTOR, y = avg_height, fill = OPEN)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Peak Height by Region (Stacked by Open Status)",
x = "Region",
y = "Average Peak Height",
fill = "Open") +
scale_fill_manual(values = c("TRUE" = "pink2", "FALSE" = "lavender"),
labels = c("Open", "Closed")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = "1-21-2025_TT.jpg", plot = tt1)
install.packages(c("sf","elevatr","terra","stars","tidycensus"))
install.packages('devtools')
devtools::install_github("ropensci/USAboundaries")
#| include: false
knitr::opts_chunk$set(
collapse = TRUE,
warning = FALSE,
message = FALSE,
error = TRUE,
fig.height = 2.75,
fig.width = 4.25,
fig.env='figure',
fig.pos = 'h',
fig.align = 'center')
install.packages(c("sf","elevatr","terra","stars","tidycensus"))
install.packages('devtools')
devtools::install_github("ropensci/USAboundaries")
install.packages("USAboundariesData", repos = "https://ropensci.r-universe.dev", type = "source")
install.packages("devtools")
#Install these packages first
# install.packages(c("sf","elevatr","terra","stars","tidycensus"))
# install.packages('devtools')
# devtools::install_github("ropensci/USAboundaries")
# install.packages("USAboundariesData", repos = "https://ropensci.r-universe.dev", type = "source")
library(tidyverse)
library(sf) # tools for working with spatial vector data (GIS functionality, mapping)
library(elevatr) # access to raster elevation maps
library(terra)
library(stars)
library(tidycensus) # spatial data for the US with census information
library(USAboundaries) # access to boundaries for US states, counties, zip codes, and congressional districts
library(tidyverse)
knitr::opts_chunk$set(fig.align="center",warning=FALSE,message=FALSE)
# The sf package comes with a North Carolina shapefile:
nc <- st_read(system.file("shape/nc.shp", package = "sf"))
# Read in shapefiles just downloaded
mn_cities <- st_read("Add correct relative path to city_and_township_population_centers.shp")
# The sf package comes with a North Carolina shapefile:
nc <- st_read(system.file("shape/nc.shp", package = "sf"))
# Read in shapefiles just downloaded
mn_cities <- st_read("../data/shp_loc_pop_centers/city_and_township_population_centers.shp")
mn_water <- st_read("Add correct relative path to LakesAndRivers.shp")
# The sf package comes with a North Carolina shapefile:
nc <- st_read(system.file("shape/nc.shp", package = "sf"))
# Read in shapefiles just downloaded
mn_cities <- st_read("../data/shp_loc_pop_centers/city_and_township_population_centers.shp")
mn_water <- st_read("../data/shp_loc_pop_centers/LakesAndRivers.shp")
# The sf package comes with a North Carolina shapefile:
nc <- st_read(system.file("shape/nc.shp", package = "sf"))
# Read in shapefiles just downloaded
mn_cities <- st_read("../data/shp_loc_pop_centers/city_and_township_population_centers.shp")
mn_water <- st_read("../data/shp_water_lakes_rivers/LakesAndRivers.shp")
# The sf package comes with a North Carolina shapefile:
nc <- st_read(system.file("shape/nc.shp", package = "sf"))
# Read in shapefiles just downloaded
mn_cities <- st_read("../data/shp_loc_pop_centers/city_and_township_population_centers.shp")
mn_water <- st_read("../data/shp_water_lakes_rivers/LakesAndRivers.shp")
mn_cities
class(nc)
class(mn_cities)
class(mn_water)
st_crs(nc)
ggplot(nc) +
geom_sf() +
theme_classic() +
labs(title = "NAD27")
nc_transformed <- nc %>% st_transform(crs = "EPSG:32133")
st_crs(nc_transformed)
ggplot(nc_transformed) +
geom_sf() +
theme_classic()
transform_and_plot <- function(spatial_obj, new_crs) {
spatial_obj %>%
st_transform(crs = new_crs) %>%
ggplot() +
geom_sf() +
theme_classic()
}
# Example usage of this function (using a South Carolina CRS)
transform_and_plot(nc, new_crs = "EPSG:32133")
# Load country boundaries data as sf object
mn_counties <- USAboundaries::us_counties(resolution = "high", states = "Minnesota")
# Take care of duplicate column names (there are two identical "state_name" columns)
names_counties <- names(mn_counties)
names(mn_counties)[names_counties == "state_name"] <- c("state_name1", "state_name2")
st_crs(mn_cities)
st_crs(mn_water)
st_crs(mn_counties)
mn_counties_transformed <- mn_counties %>% st_transform(crs = "NAD83 / UTM zone 15N")
mn_counties_transformed <- mn_counties %>% st_transform(crs = "NAD83")
st_crs(mn_counties_transformed)
mn_counties_transformed <- mn_counties %>% st_transform(crs = st_crs(mn_cities))
st_crs(mn_counties_transformed)
ggplot() +
geom_sf(mn_counties) +
geom_sf(mn_cities, size = 0.5) +
ggthemes::theme_map()
ggplot() +
geom_sf(aes(mn_counties)) +
geom_sf(aes(mn_cities, size = 0.5)) +
ggthemes::theme_map()
#Install these packages first
# install.packages(c("sf","elevatr","terra","stars","tidycensus"))
# install.packages('devtools')
# devtools::install_github("ropensci/USAboundaries")
# install.packages("USAboundariesData", repos = "https://ropensci.r-universe.dev", type = "source")
library(tidyverse)
library(sf) # tools for working with spatial vector data (GIS functionality, mapping)
library(elevatr) # access to raster elevation maps
library(terra)
library(stars)
library(tidycensus) # spatial data for the US with census information
library(USAboundaries) # access to boundaries for US states, counties, zip codes, and congressional districts
library(ggplot2)
library(ggthemes)
ggplot() +
geom_sf(aes(mn_counties)) +
geom_sf(aes(mn_cities, size = 0.5)) +
ggthemes::theme_map()
ggplot() +
geom_sf(aes(mn_counties, fill = "white")) +
geom_sf(aes(mn_cities, size = 0.5)) +
ggthemes::theme_map()
ggplot() +
geom_sf(mn_counties, fill = "white") +
geom_sf(mn_cities, size = 0.5) +
ggthemes::theme_map()
ggplot(mn_counties) +
geom_sf(fill = "white") +
geom_sf(mn_cities, size = 0.5) +
ggthemes::theme_map()
ggplot() +
geom_sf(mn_counties, fill = "white") +
geom_sf(mn_cities, size = 0.5) +
ggthemes::theme_map()
ggplot() +
geom_sf(data = mn_counties, fill = "white") +
geom_sf(data = mn_cities, size = 0.5) +
ggthemes::theme_map()
ggplot() +
geom_sf(data = mn_counties, fill = "white") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom") # move legend
elevation <- elevatr::get_elev_raster(mn_counties, z = 5, clip = "bbox")
raster::crs(elevation) <- sf::st_crs(mn_counties)
# Convert to data frame for plotting
elev_df <- elevation %>% terra::as.data.frame(xy = TRUE)
colnames(elev_df) <- c("x", "y", "elevation")
elev_df
ggplot() +
geom_sf(data = elev_df,aes( x=x, y=y, fill = elevation))
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation))
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = "white") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_raster(mapping = NULL,
data = NULL,
stat = "identity",
position = "identity",
...,
hjust = 0.5,
vjust = 0.5,
interpolate = FALSE,
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE
))
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA) +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA) +
scale_fill_gradient(low = "green4") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA) +
scale_fill_gradient(high = "green4", low = "blue4") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA) +
scale_fill_gradient(high = "green4", low = "#008ECD") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA) +
scale_fill_gradient(high = "green4", low = "#008ECD") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_b() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA) +
scale_fill_gradient(high = "green4", low = "#008ECD") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") +
scale_fill_gradient(high = "green4", low = "#008ECD") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() +
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") +
scale_fill_gradient(high = "green4", low = "#008ECD") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() +
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "right")
seven_countyarea <- mn_counties %>%
filter(name %in% c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott")) %>%
st_bbox()
seven_countyarea
elevation <- elevatr::get_elev_raster(mn_counties %>% st_crop(seven_countyarea), z = 9, clip = "bbox")
library(tidyverse)
knitr::opts_chunk$set(fig.align="center",warning=FALSE,message=FALSE)
#Install these packages first
# install.packages(c("sf","elevatr","terra","stars","tidycensus"))
# install.packages('devtools')
# devtools::install_github("ropensci/USAboundaries")
# install.packages("USAboundariesData", repos = "https://ropensci.r-universe.dev", type = "source")
library(tidyverse)
library(sf) # tools for working with spatial vector data (GIS functionality, mapping)
library(elevatr) # access to raster elevation maps
library(terra)
library(stars)
library(tidycensus) # spatial data for the US with census information
library(USAboundaries) # access to boundaries for US states, counties, zip codes, and congressional districts
library(ggplot2)
library(ggthemes)
# The sf package comes with a North Carolina shapefile:
nc <- st_read(system.file("shape/nc.shp", package = "sf"))
# Read in shapefiles just downloaded
mn_cities <- st_read("../data/shp_loc_pop_centers/city_and_township_population_centers.shp")
mn_water <- st_read("../data/shp_water_lakes_rivers/LakesAndRivers.shp")
class(nc)
class(mn_cities)
class(mn_water)
st_crs(nc)
ggplot(nc) +
geom_sf() +
theme_classic() +
labs(title = "NAD27")
nc_transformed <- nc %>% st_transform(crs = "EPSG:32133")
st_crs(nc_transformed)
ggplot(nc_transformed) +
geom_sf() +
theme_classic()
transform_and_plot <- function(spatial_obj, new_crs) {
spatial_obj %>%
st_transform(crs = new_crs) %>%
ggplot() +
geom_sf() +
theme_classic()
}
# Example usage of this function (using a South Carolina CRS)
transform_and_plot(nc, new_crs = "EPSG:32133")
# Load country boundaries data as sf object
mn_counties <- USAboundaries::us_counties(resolution = "high", states = "Minnesota")
# Take care of duplicate column names (there are two identical "state_name" columns)
names_counties <- names(mn_counties)
names(mn_counties)[names_counties == "state_name"] <- c("state_name1", "state_name2")
st_crs(mn_cities)
st_crs(mn_water)
st_crs(mn_counties)
mn_counties_transformed <- mn_counties %>% st_transform(crs = st_crs(mn_cities))
st_crs(mn_counties_transformed)
ggplot() +
geom_sf(data = mn_counties, fill = "white") +
geom_sf(data = mn_cities, size = 0.5) +
ggthemes::theme_map()
ggplot() +
geom_sf(data = mn_counties, fill = "white") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() + # continuous (gradient) color scale
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "bottom") # move legend
elevation <- elevatr::get_elev_raster(mn_counties, z = 5, clip = "bbox")
raster::crs(elevation) <- sf::st_crs(mn_counties)
# Convert to data frame for plotting
elev_df <- elevation %>% terra::as.data.frame(xy = TRUE)
colnames(elev_df) <- c("x", "y", "elevation")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") +
scale_fill_gradient(high = "green4", low = "#008ECD") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() +
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "right")
seven_countyarea <- mn_counties %>%
filter(name %in% c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott")) %>%
st_bbox()
seven_countyarea
elevation <- elevatr::get_elev_raster(mn_counties %>% st_crop(seven_countyarea), z = 9, clip = "bbox")
ggplot() +
geom_raster(data = elev_df, aes(x = x, y = y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") + # county boundary layer
geom_sf(data = mn_water, fill = "lightsteelblue1", color = "lightsteelblue1") + # NEW: river/lake layer
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c(option = "magma") + # continuous (gradient) color scale
scale_fill_gradient(low = "darkgreen", high = "white") + # continuous (gradient) fill scale
coord_sf(xlim = seven_countyarea[c("xmin", "xmax")], ylim = seven_countyarea[c("ymin", "ymax")]) + # NEW: crop map to Twin Cities bounding box
labs(title = "Twin Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "none") # remove legend
ggplot() +
geom_raster(data = elev_df, aes(x = x, y = y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") + # county boundary layer
geom_sf(data = mn_water, fill = "lightsteelblue1", color = "lightsteelblue1") + # NEW: river/lake layer
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c(option = "magma") + # continuous (gradient) color scale
scale_fill_gradient(low = "darkgreen", high = "white") + # continuous (gradient) fill scale
coord_sf(xlim = seven_countyarea[c("xmin", "xmax")], ylim = seven_countyarea[c("ymin", "ymax")]) + # NEW: crop map to Twin Cities bounding box
labs(title = "Twin Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "none") # remove legend
library(leaflet)
mn_counties_leaf <- mn_counties %>% st_transform(4326) # Leaflet expects this CRS for vectors
mn_cities_leaf <- mn_cities %>% st_transform(4326)
cities_per_county <- st_join(mn_cities_leaf, mn_counties_leaf) %>%
st_drop_geometry() %>% # removes geometry - makes the following calculation more efficient
count(name)
mn_counties_leaf %>%
filter(name %in% c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott")) %>%
left_join(cities_per_county) %>%
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5, opacity = 1.0,
fillOpacity = 0.5, fillColor = ~colorQuantile("YlOrRd", n)(n),
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE)) %>%
addCircles(data = mn_cities_leaf %>% filter(County %in% paste(c("Anoka", "Hennepin", "Ramsey", "Dakota", "Carver", "Washington", "Scott"), "County")), color = "#444444")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") +
scale_fill_gradient(high = "green4", low = "white") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() +
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "right")
ggplot() +
geom_raster(data = elev_df,aes( x=x, y=y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") +
scale_fill_gradient(high = "green4", low = "#008ECD") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) + # cities layer
scale_color_viridis_c() +
labs(title = "Minnesota Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "right")
png("figures/tc_map_zoom.png", width = 800, height = 400)
ggplot() +
geom_raster(data = elev_df, aes(x = x, y = y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") +
geom_sf(data = mn_water, fill = "lightsteelblue1", color = "lightsteelblue1") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) +
scale_color_viridis_c(option = "magma") +
scale_fill_gradient(low = "darkgreen", high = "white") +
coord_sf(xlim = seven_countyarea[c("xmin", "xmax")], ylim = seven_countyarea[c("ymin", "ymax")]) +
labs(title = "Twin Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "none")
dev.off()
png("../figures/tc_map_zoom.png", width = 800, height = 400)
ggplot() +
geom_raster(data = elev_df, aes(x = x, y = y, fill = elevation)) +
geom_sf(data = mn_counties, fill = NA, color = "black") +
geom_sf(data = mn_water, fill = "lightsteelblue1", color = "lightsteelblue1") +
geom_sf(data = mn_cities %>% filter(Population >= 10000), mapping = aes(color = Population, size = Population)) +
scale_color_viridis_c(option = "magma") +
scale_fill_gradient(low = "darkgreen", high = "white") +
coord_sf(xlim = seven_countyarea[c("xmin", "xmax")], ylim = seven_countyarea[c("ymin", "ymax")]) +
labs(title = "Twin Cities with Population >= 10,000") +
ggthemes::theme_map() +
theme(legend.position = "none")
dev.off()
